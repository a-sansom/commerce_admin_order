<?php

/**
 * Implements hook_menu()
 */
function commerce_admin_order_menu() {
  $items['admin/commerce/orders/non_admin_orders'] = array(
    'title' => t('Non-admin orders'),
    'page callback' => 'commerce_admin_order_non_admin_orders_page',
    'access callback' => 'commerce_admin_order_menu_access',
    'access arguments' => array('administer commerce admin orders', 'classify order as admin order'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/commerce/orders/admin_orders'] = array(
    'title' => t('Admin orders'),
    'page callback' => 'commerce_admin_order_admin_orders_page',
    'access callback' => 'commerce_admin_order_menu_access',
    'access arguments' => array('administer commerce admin orders', 'rescind admin order classification'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function commerce_admin_order_permission() {
  return array(
    'administer commerce admin orders' => array(
      'title' => t('Administer Commerce order admin order classification'),
    ),
    'classify order as admin order' => array(
      'title' => t('Classify Commerce order(s) as admin order(s)'),
    ),
    'rescind admin order classification' => array(
      'title' => t('Rescind admin order classification from Commerce order(s)'),
    ),
  );
}

/**
 * Implements hook_user_operations()
 */
function commerce_admin_order_user_operations() {
  $operations = array();

  // Allow only certain users to convert orders by user
  $permission = array('administer commerce admin orders');
  if (commerce_admin_order_menu_access($permission)) {
    $operations['update_to_commerce_admin_order_by_user'] = array(
      'label' => t('Update user created orders to "admin orders"'),
      'callback' => 'commerce_admin_order_update_orders_by_user',
      'callback arguments' => array('to_admin_order'),
    );

    $operations['update_from_commerce_admin_order_by_user'] = array(
      'label' => t('Update user created "admin orders" to orders'),
      'callback' => 'commerce_admin_order_update_orders_by_user',
      'callback arguments' => array('from_admin_order'),
    );
  }

  return $operations;
}

/**
 * Custom menu item access control
 */
function commerce_admin_order_menu_access() {
  foreach (func_get_args() as $permission) {
    if (user_access($permission)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Return if the current user has module admin permissions
 */
function commerce_admin_order_user_has_module_admin_permissions() {
  $permission = array('administer commerce admin orders');

  if (commerce_admin_order_menu_access($permission)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Admin page listing orders, which are not recorded as admin orders
 */
function commerce_admin_order_non_admin_orders_page() {
  $module_enabled_date = variable_get('commerce_admin_order_first_enabled', 0);

  $page = array();

  $page['summary'] = array(
    'paragraph_1' => array(
      '#type' => 'markup',
      '#markup' => t('Orders that were created before the Commerce Admin order 
        module was enabled (@module_enabled_date) that are not considered to have 
        been created via the Commerce back office system.', 
        array('@module_enabled' => date('Y-m-d H:i:sO', $module_enabled_date))),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    ),
  );

  if (commerce_admin_order_user_has_module_admin_permissions()) {
    $page['summary']['paragraph_2'] = array(
      '#type' => 'markup',
      '#markup' => l(t('You have permissions to update orders in bulk, by user.'), 'admin/people'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }

  $page['form'] = drupal_get_form('commerce_admin_order_order_list_form', 
    array('are_admin_orders' => FALSE));

  return $page;
}

/**
 * Page listing orders which were created before the module was enabled that
 * have been re-classified as 'admin orders'
 */
function commerce_admin_order_admin_orders_page() {
  $module_enabled_date = variable_get('commerce_admin_order_first_enabled', 0);

  $page = array();

  $page['summary'] = array(
    'paragraph_1' => array(
      '#type' => 'markup',
      '#markup' => t('Orders that were created before the Commerce Admin order 
          module was enabled (@module_enabled_date) that have been 
          re-classified as having been created by the back office system.', 
        array('@module_enabled_date' => date('Y-m-d H:i:sO', $module_enabled_date))),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    ),
  );

  if (commerce_admin_order_user_has_module_admin_permissions()) {
    $page['summary']['paragraph_2'] = array(
      '#type' => 'markup',
      '#markup' => l(t('You have permissions to update orders in bulk, by user.'), 'admin/people'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }

  $page['form'] = drupal_get_form('commerce_admin_order_order_list_form', 
    array('are_admin_orders' => TRUE));

  return $page;
}

/**
 * Pager form that lists either: 
 * 
 * - Orders created before this module was enabled and therefore are not known 
 * to have been created via the Commerce back office system (non-admin orders)
 *
 * Or:
 * 
 *  - A list of orders that were created before the module was enabled and that
 * have since been reclassified as having been created via the back office 
 * system (admin orders).
 * 
 * Users with the appropriate permissions can use this form to reclassify
 * specific orders from those lists, as required.
 * 
 * Orders created by the back office system after this module was enabled are 
 * not listed on either screen as they are admin orders, without doubt and will
 * have been recorded as so by this module.
 * 
 * @todo This should be clearer...
 */
function commerce_admin_order_order_list_form($form, &$form_state, $params) {
  $module_enabled_date = variable_get('commerce_admin_order_first_enabled', 0);

  $header = array(
    array(
      'data' => t('Order id'),
      'field' => 'co.order_id',
      'sort' => 'DESC',
    ),
    array(
      'data' => t('Date created'),
      'field' => 'co.created',
      'sort' => 'DESC',
    ),
    array(
      'data' => t('Order created by'),
    ),
  );

  $select = db_select('commerce_order', 'co');
  if (!$params['are_admin_orders']) {
    $select->leftJoin('commerce_admin_order_order', 'cao', 'co.order_id = cao.order_id');
  }
  else {
    $select->join('commerce_admin_order_order', 'cao', 'co.order_id = cao.order_id');

    $header[] = array(
      'data' => t('Converted on'),
    );
    $header[] = array(
      'data' => t('Converted by'),
    );
  }
  $select->leftJoin('users', 'u', 'co.uid = u.uid');
  $select->fields('co', array('order_id', 'created'));
  $select->fields('u', array('uid', 'name'));
  $select->fields('cao', array('creator_uid', 'conversion', 'conversion_uid'));
  if (!$params['are_admin_orders']) {
    $select->isNull('cao.order_id');
  }
  $select->condition('co.status', commerce_admin_order_order_statuses_to_ignore(), 'NOT IN');
  $select->condition('co.created', $module_enabled_date, '<');
  $select->orderBy('co.order_id', 'ASC');

  $select = $select->extend('PagerDefault')->limit(50)
    ->extend('TableSort')->orderByHeader($header);

  $result = $select->execute();

  $options = array();
  while ($record = $result->fetchObject()) {
    $options[$record->order_id] = array(
      l(check_plain($record->order_id), 'admin/commerce/orders/' . check_plain($record->order_id) . '/view'),
      date('Y-m-d H:i:sO', $record->created),
    );

    $order_wrapper = entity_metadata_wrapper('commerce_order', $record->order_id);

    $creator = new stdClass();
    $creator->name = commerce_admin_order_username_from_uid($order_wrapper->creator_uid->value());
    $creator->id = $order_wrapper->creator_uid->value();

    $options[$record->order_id][] = (!$creator->id) ? $creator->name : l(check_plain($creator->name), 'user/' . check_plain($creator->id));
    if ($params['are_admin_orders']) {
      $options[$record->order_id][] = date('Y-m-d H:i:sO', $record->conversion);
      $options[$record->order_id][] = commerce_admin_order_username_from_uid($record->conversion_uid);
    }
  }

  $form['order_table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No orders found'),
  );

  $form['pager'] = array(
    '#theme' => 'pager',
  );

  $label = t('Update to non-admin order(s)');
  if (!$params['are_admin_orders']) {
    $label = t('Update to admin order(s)');
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $label,
  );

  return $form;
}

/**
 * Validate the admin/non-admin orders form. Make sure at least one order was 
 * selected
 */
function commerce_admin_order_order_list_form_validate($form, &$form_state) {
 $order_ids = commerce_admin_order_get_selected_order_ids($form_state['values']['order_table']);

  if (!count($order_ids)) {
    form_set_error('', t('You must select at least one order'));
  }
}

/**
 * Handle submission of the admin/non-admin orders forms
 */
function commerce_admin_order_order_list_form_submit($form, &$form_state) {
  $order_ids = commerce_admin_order_get_selected_order_ids($form_state['values']['order_table']);
  $operation = 'insert';

  if ($form_state['triggering_element']['#value'] == t('Update to non-admin order(s)')) {
    $operation = 'delete';
  }

  if ($order_ids) {
    try {
      if ($operation == 'insert') {
        global $user;

        $query = db_insert('commerce_admin_order_order')->fields(array(
          'order_id',
          'creator_uid',
          'conversion',
          'conversion_uid',
        ));

        foreach ($order_ids as $order_id) {
          $uid = commerce_admin_order_order_first_revision_uid($order_id);
          $query->values(array($order_id, $uid, time(), $user->uid));
        }

        $query->execute();

        drupal_set_message(t('!inserted Order(s) updated to be Commerce Admin order(s). ' . l(t('See log for details'), 'admin/reports/dblog'), 
          array('!inserted' => count($order_ids))), 'status');
      }
      else {
        $deleted = db_delete('commerce_admin_order_order')
          ->condition('order_id', $order_ids, 'IN')
          ->execute();

        drupal_set_message(t('!deleted Order(s) updated to no longer be Commerce Admin order(s). ' . l(t('See log for details'), 'admin/reports/dblog'),
          array('!deleted' => count($order_ids))), 'status');
      }

      foreach ($order_ids as $order_id) {
        watchdog('commerce_admin_order', t('Order @order_id has been
          updated as Commerce Admin order. Operation was @operation.',
          array('@order_id' => $order_id, '@operation' => $operation)));
      }
    }
    catch (Exception $e) {
      $message = t('Failed to @operation order id @order_id into/from 
        commerce_admin_order_order table. Query: @query',
        array(
          '@order_id' => $order_id, 
          '@query' => $e->query_string,
          '@message' => $e->getMessage(),
          '@operation' => $operation
        )
      );
      watchdog('commerce_admin_order', $message);
      drupal_set_message($message, 'error');
    }
  }
}

/**
 * Return an array of order ids that were selected in a submitted form
 */
function commerce_admin_order_get_selected_order_ids($all_order_ids) {
  $selected_order_ids = array();

  foreach ($all_order_ids as $order_id => $selected) {
    if ($selected) {
      $selected_order_ids[] = $order_id;
    }
  }

  return $selected_order_ids;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function commerce_admin_order_form_commerce_order_ui_order_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'commerce_admin_order_order_form_submit';
}

/**
 * Additional 'Create an order' form submission handler
 */
function commerce_admin_order_order_form_submit($form, &$form_state) {
  $order = $form_state['commerce_order'];

  // New orders have same value for created and changed
  if ($order->created == $order->changed) {
    try {
      global $user;

      $id = db_insert('commerce_admin_order_order')
        ->fields(array(
          'order_id' => $order->order_id,
          'creator_uid' => $user->uid,
        ))
        ->execute();

      rules_invoke_event('commerce_admin_order_order_created', $order);
    }
    catch (Exception $e) {
      $message = t('Failed to insert order id @order_id into 
        commerce_admin_order_order table. Query: @query', 
        array(
          '@order_id' => $order_id, 
          '@query' => $e->query_string, 
          '@message' => $e->getMessage()
        )
      );
      watchdog('commerce_admin_order', $message);
      drupal_set_message($message, 'error');
    }
  }
}

/**
 * Reclassify Commerce orders as 'admin order's in bulk
 * 
 * Using the user administration form (admin/people), classify all orders
 * created by a user, that were created before the Commerce Admin order module
 * was enabled, as either admin orders or not.
 * 
 * Because the 'created by' value for an order is a computed value, this is 
 * quite database intensive because each order requires a lookup to ascertain
 * who created the first revision. EntityFieldQuery queries aren't an option as 
 * you can't use computed properties.
 */
function commerce_admin_order_update_orders_by_user($users, $operation) {
  if ($operation == 'to_admin_order') {
    $users['0'] = '0';

    // Use Batch API.Could be dealing with a large amount of orders
    $batch = array(
      'title' => t('Converting orders to admin orders by user'),
      'operations' => array(
        array('commerce_admin_order_batch_operation_bulk_update', 
          array(
            'users' => $users,
            'batch_total' => commerce_admin_order_batch_total_records($users),
            'batch_size' => 50, /* @todo make configurable */
          ),
        ),
      ),
      'finished' => 'commerce_admin_order_batch_operation_bulk_update_complete',
      'init_message' => t('Initialising...'),
      'progress_message' => t('Running...'),
      'error_message' => t('Commerce Admin order Batch API processing errored'),
    );

    batch_set($batch);
  }
  elseif ($operation == 'from_admin_order') {
    // Only update orders for the user that have previously been updated to be
    // admin orders
    $deleted = db_delete('commerce_admin_order_order')
      ->condition('creator_uid', $users, 'IN')
      ->isNotNull('conversion')
      ->execute();

    drupal_set_message(t('@number order(s) updated from Commerce Admin orders', array('@number' => $deleted)), 'status');
  }
}

/**
 * Updating orders to admin orders in bulk, by user using Batch API
 */
function commerce_admin_order_batch_operation_bulk_update($users, $batch_total, $batch_size, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['batch_no'] = 0;
    $context['sandbox']['total_batches'] = ceil($batch_total / $batch_size);
    $context['sandbox']['module_enabled_ts'] = variable_get('commerce_admin_order_first_enabled', 0);
    $context['sandbox']['converted_orders'] = 0;
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $batch_total;
  }

  // To use Batch API we need to get all orders that are not currently 'admin 
  // orders' and aren't shopping carts, *and* have been converted to be admin
  // orders to see if the selected users created them. 
  //
  // The emphasized portion of this is so that we can use $query->range() thus 
  // adding OFFSET and LIMIT to the query and therefore making the query 
  // compatible with batch processing.
  $query = db_select('commerce_order', 'co');
  $query->fields('co', array('order_id'));
  $query->fields('caoo', array('conversion'));
  $query->leftJoin('commerce_admin_order_order', 'caoo', 'co.order_id = caoo.order_id');
  $query->condition('co.uid', $users, 'IN');
  $query->condition('co.status', commerce_admin_order_order_statuses_to_ignore(), 'NOT IN');
  $query->condition('co.created', $context['sandbox']['module_enabled_ts'], '<=');
  $query->condition(
    db_or()
      ->isNull('caoo.order_id')
      ->isNotNull('caoo.conversion')
  );
  $query->orderBy('co.order_id');
  $query->range($context['sandbox']['progress'], $batch_size);

  $result = $query->execute();

  if ($result) {
    global $user;
    $updates = array();
    // No longer interested in anon user because we're going to see who created 
    // the the first order revision 
    unset($users['0']);

    foreach ($result AS $record) {
      // Only potentially process not yet converted orders
      if (empty($record->conversion)) {
        $uid = commerce_admin_order_order_first_revision_uid($record->order_id);

        if (in_array($uid, $users)) {
          $updates[] = array($record->order_id, $uid, time(), $user->uid);
          $context['sandbox']['converted_orders']++;
        }
      }
    }

    if ($updates) {
      // @todo commerce_admin_order_order_list_form_submit() same as here
      $query = db_insert('commerce_admin_order_order')->fields(array(
        'order_id',
        'creator_uid',
        'conversion',
        'conversion_uid',
      ));

      foreach ($updates as $update) {
        $query->values($update);
      }

      $query->execute();
    }
  }

  $context['sandbox']['batch_no']++;
  $current = $context['sandbox']['batch_no'] * $batch_size;
  if ($current > $batch_total) {
    $current = $batch_total;
  }
  $context['message'] = t('Processed @current of @total', 
    array('@current' => $current, '@total' => $batch_total));
  // @todo info to show when finished
  // @todo watchdog logging?
  $context['results'][0] = t('@converted order(s) converted to admin orders', 
    array('@converted' => $context['sandbox']['converted_orders']));
  $context['sandbox']['progress'] = $context['sandbox']['progress'] + $batch_size;
  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
}

/**
 * Callback on completion of batch processing of bulk order updates
 */
function commerce_admin_order_batch_operation_bulk_update_complete($success, $results, $operations, $time) {
  drupal_set_message($results[0], 'status');
}

/**
 * Return the number of records that will be used by bulk processing
 */
function commerce_admin_order_batch_total_records($users) {
  $module_enabled_ts = variable_get('commerce_admin_order_first_enabled', 0);

  $query = db_select('commerce_order', 'co');
  $query->fields('co', array('order_id'));
  $query->leftJoin('commerce_admin_order_order', 'caoo', 'co.order_id = caoo.order_id');
  $query->condition('co.uid', $users, 'IN');
  $query->condition('co.status', array('cart', 'checkout_checkout', 'checkout_review', 'checkout_payment', 'checkout_complete'), 'NOT IN');
  $query->condition('co.created', $module_enabled_ts, '<=');
  $query->condition(db_or()->isNull('caoo.order_id')->isNotNull('caoo.conversion'));

  return $query->countQuery()->execute()->fetchField();
}

/**
 * Return array of order statuses that we want to ignore when listing orders
 */
function commerce_admin_order_order_statuses_to_ignore() {
  $cart_statuses = commerce_order_statuses(array('cart' => TRUE));

  return $cart_statuses + array('checkout_payment', 'checkout_complete');
}

/**
 * Implements hook_entity_property_info_alter()
 */
function commerce_admin_order_entity_property_info_alter(&$info) {
  $info['commerce_order']['properties']['is_admin_order'] = array(
    'type' => 'boolean',
    'label' => 'Order created via admin?',
    'description' => 'Indicates that an order was manually created via Drupal 
      admin',
    'getter callback' => 'commerce_admin_order_is_admin_order',
  );

  $info['commerce_order']['properties']['creator_uid'] = array(
    'type' => 'integer',
    'label' => 'Order creator Uid',
    'description' => 'ID of the user that created the order',
    'getter callback' => 'commerce_admin_order_creator_uid',
  );
}

/**
 * Return flag indicating whether or not an order was created via Drupal admin 
 * form
 */
function commerce_admin_order_is_admin_order($order) {
  $query = db_select('commerce_admin_order_order', 'cao');
  $query->condition('cao.order_id', $order->order_id, '=');

  if ($query->countQuery()->execute()->fetchField()) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Return flag indicating whether or not an order was created via Drupal admin
 * form
 */
function commerce_admin_order_creator_uid($order) {
  $query = db_select('commerce_admin_order_order', 'caoo');
  $query->fields('caoo', array('creator_uid'));
  $query->condition('caoo.order_id', $order->order_id, '=');

  $uid = $query->execute()->fetchField();
  if (!$uid) {
    $uid = commerce_admin_order_order_first_revision_uid($order->order_id);
  }

  return $uid;
}

/**
 * Return the user id of the first revision of an order. In other words, the uid
 * of the user that initially created the order
 */
function commerce_admin_order_order_first_revision_uid($order_id) {
  $query = db_select('commerce_order', 'co');
  $query->join('commerce_order_revision', 'cor', 'co.order_id = cor.order_id');
  $query->fields('cor', array('revision_uid'));
  $query->addExpression('MIN(cor.revision_timestamp)', 'min_revision_timestamp');
  $query->condition('co.order_id', $order_id);
  $query->groupBy('co.order_id');

  return $query->execute()->fetchField();
}

/**
 * Return account username given a user id
 */
function commerce_admin_order_username_from_uid($uid) {
  $name = 'Anonymous';

  if ($uid) {
    $name = db_select('users', 'u')
      ->fields('u', array('name'))
      ->condition('uid', $uid)
      ->execute()
      ->fetchField();
  }

  return $name;
}

/**
 * Implements hook_commerce_order_commerce_order_update()
 */
function commerce_admin_order_commerce_order_update($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  if ($order_wrapper->is_admin_order->value()) {
    rules_invoke_event('commerce_admin_order_order_updated', $order);
  }
}

/**
 * Implements hook_commerce_order_commerce_order_delete()
 */
function commerce_admin_order_commerce_order_delete($order_id) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order_id);

  if ($order_wrapper->is_admin_order->value()) {
    $deleted = db_delete('commerce_admin_order_order')
      ->condition('order_id', $order_wrapper->order_id->value(), '=')
      ->execute();

    if ($deleted) {
      rules_invoke_event('commerce_admin_order_order_deleted', $order_id);
    }
    else {
      $message = t('Failed to delete Commerce order from 
        commerce_admin_order_order table. Order id is @order_id', 
        array('@order_id' => $order_id)
      );
      watchdog('commerce_admin_order', $message);
      drupal_set_message($message, 'error');
    }
  }
}

/**
 * Implements hook_commerce_payment_transaction_insert()
 */
function commerce_admin_order_commerce_payment_transaction_insert($transaction) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $transaction->order_id);

  if ($order_wrapper->is_admin_order->value()) {
    rules_invoke_event('commerce_admin_order_payment_transaction_inserted', $transaction);
  }
}

/**
 * Implements hook_commerce_payment_transaction_update()
 */
function commerce_admin_order_commerce_payment_transaction_update($transaction) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $transaction->order_id);

  if ($order_wrapper->is_admin_order->value()) {
    rules_invoke_event('commerce_admin_order_payment_transaction_updated', $transaction);
  }
}

/**
 * Implements hook_commerce_payment_transaction_delete()
 */
function commerce_admin_order_commerce_payment_transaction_delete($transaction) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $transaction->order_id);

  if ($order_wrapper->is_admin_order->value()) {
    rules_invoke_event('commerce_admin_order_payment_transaction_deleted', $transaction);
  }
}

/**
 * Implements hook_entity_view_alter()
 */
function commerce_admin_order_entity_view_alter(&$build, $type) {
  if ($type == 'commerce_order') {
    $order_id = $build['#entity']->order_id;
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order_id);

    if ($order_wrapper->is_admin_order->value()) {
      $creator = commerce_admin_order_username_from_uid($order_wrapper->creator_uid->value());

      $build['commerce_admin_order'] = array(
        '#type' => 'fieldset',
        '#weight' => '-50',
        '#title' => t('Commerce Admin order'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $build['commerce_admin_order']['indicator'] = array(
        '#markup' => t('"@creator_name" created this order via the Commerce back 
          office system on @creation_time',
          array('@creator_name' => $creator, '@creation_time' => date('Y-m-d H:i:sO', $build['#entity']->created))),
      );
    }
  }
}

/**
 * Implements hook_views_api()
 */
function commerce_admin_order_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_admin_order'),
  );
}
