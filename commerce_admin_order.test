<?php

/**
 * @file
 * Tests for the commerce admin order module.
 */ 
class CommerceAdminOrderTestCase extends CommerceBaseTestCase {
  /**
   * A store admin user
   */
  protected $store_admin_user;

  /**
   * Implementation of getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce Admin order',
      'description' => 'Test functionality of the Commerce Admin order module',
      'group' => 'Commerce (contrib)',
    );
  }

  /**
   * Implementation of setUp()
   */
  public function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_admin_order'));
    parent::setUp($modules);

    $this->store_admin_user = $this->createStoreAdmin();
    $this->drupalLogin($this->store_admin_user);

    $this->module_enabled_date = variable_get('commerce_admin_order_first_enabled');

    cache_clear_all();
  }

  // Test form that makes 'non-admin orders' into 'admin orders'
  public function testCommerceAdminOrderNonAdminOrderListForm() {
    // Create an order so it can be converted into an admin order
    $product = $this->createDummyProduct(
      'PROD-01',
      'Product One'
    );

    $order = $this->createDummyOrder(
      $this->store_admin_user->uid, 
      array($product->product_id => 1), 
      'complete'
    );

    // Update commerce_order.created value to day before module enabled so that 
    // the order will show on the non-admin orders list/page
    $updated = db_update('commerce_order')
      ->fields(array(
        'created' => ($this->module_enabled_date - (60 * 60 * 24))
      ))
      ->condition('order_id', $order->order_id, '=');

    // Go to the list of 'non-admin orders'
    $this->drupalGet('admin/commerce/commerce_admin_order');
    $this->assertResponse(200, t('Accessed page listing non-admin orders successfully'));

    // 'Update to admin order(s)' the created order
    $key = 'order_table[' . $order->order_id . ']';
    $data = array($key => $order->order_id);
    $this->drupalPost(NULL, $data, t('Update to admin order(s)'));

    // Verify that the correct message is displayed
    $this->assertText(
      t('1 Order(s) updated to be Commerce Admin order(s). See log for details'),
      '\'1 Order(s) updated to be Commerce Admin order(s). See log for details\' text appears on the page'
    );

    // Verify order ID inserted in commerce_admin_order_order table
    $select = db_select('commerce_admin_order_order', 'caoo')
      ->fields('caoo', array('order_id'))
      ->condition('caoo.order_id', $order->order_id, '=');

    $count = $select->countQuery()->execute()->fetchField();

    $this->assertEqual($count, 1, 'Record exists in commerce_admin_order_order table');

    // Verify that error message is displayed if the form is submitted without
    // any order(s) selected
    $this->drupalGet('admin/commerce/commerce_admin_order');
    $this->assertResponse(200, t('Accessed page listing non-admin orders successfully'));

    $this->drupalPost(NULL, array(), t('Update to admin order(s)'));

    $this->assertText(
      t('You must select at least one order'),
      '\'You must select at least one order\' text appears on the page'
    );
  }

  // Test form that makes 'admin orders' into 'non-admin orders'
  public function testCommerceAdminOrderAdminOrderListForm() {
    // Create an order so it can be converted from an admin order
    $product = $this->createDummyProduct(
      'PROD-01',
      'Product One'
    );

    $order = $this->createDummyOrder(
      $this->store_admin_user->uid, 
      array($product->product_id => 1), 
      'complete'
    );

    // Simulate the conversion to an admin order
    $query = db_insert('commerce_admin_order_order')
      ->fields(array(
        'order_id' => $order->order_id
      ))
      ->execute();

    // Go to the list of 'admin orders'
    $this->drupalGet('admin/commerce/commerce_admin_order');
    $this->clickLink('Admin orders'); // CSS uppercases this in default theme
    $this->assertResponse(200, t('Accessed page listing admin orders successfully'));

    $key = 'order_table[' . $order->order_id . ']';
    $data = array($key => $order->order_id);
    $this->drupalPost(NULL, $data, t('Update to non-admin order(s)'));

    $this->assertText(
      t('1 Order(s) updated to no longer be Commerce Admin order(s). See log for details'),
      '\'1 Order(s) updated to no longer be Commerce Admin order(s). See log for details\' text appears on the page'
    );

    // Verify order ID no longer exists in commerce_admin_order_order table
    $select = db_select('commerce_admin_order_order', 'caoo')
      ->fields('caoo', array('order_id'))
      ->condition('caoo.order_id', $order->order_id, '=');

    $count = $select->countQuery()->execute()->fetchField();

    $this->assertEqual($count, 0, 'Record no longer exists in commerce_admin_order_order table');

    // Verify that error message is displayed if the form is submitted without
    // any order(s) selected
    $this->drupalGet('admin/commerce/commerce_admin_order');
    $this->clickLink('Admin orders');
    $this->assertResponse(200, t('Accessed page listing non-admin orders successfully'));
    
    $this->drupalPost(NULL, array(), t('Update to non-admin order(s)'));
    
    $this->assertText(
      t('You must select at least one order'),
      '\'You must select at least one order\' text appears on the page'
    );
  }

  // Test that the admin order created event happens
  public function testCommerceAdminOrderOrderCreatedEvent() {
    $this->drupalGet('admin/commerce/orders/add');

    // Minimal order creation (as per commerce order ui test)
    $country_field = 'commerce_customer_billing[und][profiles][0][commerce_customer_address][und][0][country]';
    $this->drupalPostAJAX(NULL, array($country_field => 'GB'), $country_field);
    $this->drupalPost(NULL, array('name' => $this->store_admin_user->name), t('Save order', array(), array('context' => 'a drupal commerce order')));

    $this->assertText(t('Admin order created.'), '\'commerce_admin_order_order_created\' event triggered');
  }

  // Test that the admin order updated event happens
  public function testCommerceAdminOrderOrderUpdatedEvent() {
    // Create order then edit it, checking only the edit message
    $this->drupalGet('admin/commerce/orders/add');

    $country_field = 'commerce_customer_billing[und][profiles][0][commerce_customer_address][und][0][country]';
    $this->drupalPostAJAX(NULL, array($country_field => 'GB'), $country_field);
    $this->drupalPost(NULL, array('name' => $this->store_admin_user->name), t('Save order', array(), array('context' => 'a drupal commerce order')));

    // Get hold of the order by user id, so we can use order id in subsequent requests
    $this->order = reset(commerce_order_load_multiple(array(), array('uid' => $this->store_admin_user->uid)));
    entity_get_controller('commerce_order')->resetCache();

    $this->drupalGet('admin/commerce/orders/' . $this->order->order_id . '/edit');
    $this->drupalPostAJAX(NULL, array($country_field => 'AF'), $country_field);
    $this->drupalPost(NULL, array(), t('Save order'));

    $this->assertText(t('Admin order updated.'), '\'commerce_admin_order_order_updated\' event triggered');
  }

  // Test that the admin order deleted event happens
  public function testCommerceAdminOrderOrderDeletedEvent() {
    // Create order then delete it, checking only the delete message
    $this->drupalGet('admin/commerce/orders/add');
    
    $country_field = 'commerce_customer_billing[und][profiles][0][commerce_customer_address][und][0][country]';
    $this->drupalPostAJAX(NULL, array($country_field => 'GB'), $country_field);
    $this->drupalPost(NULL, array('name' => $this->store_admin_user->name), t('Save order', array(), array('context' => 'a drupal commerce order')));

    // Get hold of the order by user id, so we can use order id in subsequent requests
    $this->order = reset(commerce_order_load_multiple(array(), array('uid' => $this->store_admin_user->uid)));
    entity_get_controller('commerce_order')->resetCache();

    $this->drupalGet('admin/commerce/orders/' . $this->order->order_id . '/delete');
    $this->drupalPost(NULL, array(), t('Delete'));

    $this->assertText(t('Admin order deleted.'), '\'commerce_admin_order_order_deleted\' event triggered');
  }
}