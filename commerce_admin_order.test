<?php

/**
 * @file
 * Tests for the commerce admin order module.
 */ 
class CommerceAdminOrderTestCase extends CommerceBaseTestCase {
  /**
   * A store admin user
   */
  protected $store_admin_user;

  /**
   * Implementation of getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce Admin order',
      'description' => 'Test functionality of the Commerce Admin order module',
      'group' => 'Commerce (contrib)',
    );
  }

  /**
   * Implementation of setUp()
   */
  public function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_admin_order'));
    parent::setUp($modules);

    $this->store_admin_user = $this->createStoreAdmin();

    $this->module_enabled_date = variable_get('commerce_admin_order_first_enabled');

    // Create some orders that can be used with tests
    //for ($i = 1; $i <= 5; $i++) {
      //$order = $this->createDummyOrder(
      //  $this->store_admin_user->uid, 
      //  array(), 
      //  'completed'
      //);

      //$this->orders[$order->order_id] = $order;
    //}

    cache_clear_all();
  }

  // Test form that makes 'non-admin orders' into 'admin orders'
  public function testCommerceAdminOrderNonAdminOrderListForm() {
    $this->drupalLogin($this->store_admin_user);

    // Create an order so it can be converted into an admin order
    $product = $this->createDummyProduct(
      'PROD-01',
      'Product One'
    );

    $order = $this->createDummyOrder(
      $this->store_admin_user->uid, 
      array($product->product_id => 1), 
      'complete'
    );

    // Update commerce_order.created value to day before module enabled so that 
    // the order will show on the non-admin orders list/page
    $updated = db_update('commerce_order')
      ->fields(array(
        'created' => ($this->module_enabled_date - (60 * 60 * 24))
      ))
      ->condition('order_id', $order->order_id, '=');

    // Go to the list of 'non-admin orders'
    $this->drupalGet('admin/commerce/commerce_admin_order');
    $this->assertResponse(200, t('Accessed page listing non-admin orders successfully'));

    // 'Update to admin order(s)' the created order
    $key = 'order_table[' . $order->order_id . ']';
    $data = array($key => $order->order_id);
    $this->drupalPost(NULL, $data, t('Update to admin order(s)'));

    // Verify that the correct message is displayed
    $this->assertText(
      t('1 Order(s) updated to be Commerce Admin order(s). See log for details'),
      '\'1 Order(s) updated to be Commerce Admin order(s). See log for details\' text appears on the page'
    );

    // Verify order ID inserted in commerce_admin_order_order table
    $select = db_select('commerce_admin_order_order', 'caoo')
      ->fields('caoo', array('order_id'))
      ->condition('caoo.order_id', $order->order_id, '=');

    $count = $select->countQuery()->execute()->fetchField();

    $this->assertIdentical($count, 1, 'Record exists in commerce_admin_order_order table');

    // Verify that error message is displayed if the form is submitted without
    // any order(s) selected
    $this->drupalGet('admin/commerce/commerce_admin_order');
    $this->assertResponse(200, t('Accessed page listing non-admin orders successfully'));

    $this->drupalPost(NULL, array(), t('Update to admin order(s)'));

    $this->assertText(
      t('You must select at least one order'),
      '\'You must select at least one order\' text appears on the page'
    );
  }

  // Test form that makes 'admin orders' into 'non-admin orders'
  public function testCommerceAdminOrderAdminOrderListForm() {
    $this->drupalLogin($this->store_admin_user);

    // Create an order so it can be converted from an admin order
    $product = $this->createDummyProduct(
      'PROD-01',
      'Product One'
    );

    $order = $this->createDummyOrder(
      $this->store_admin_user->uid, 
      array($product->product_id => 1), 
      'complete'
    );

    // Simulate the conversion to an admin order
    $query = db_insert('commerce_admin_order_order')
      ->fields(array(
        'order_id' => $order->order_id
      ))
      ->execute();

    // Go to the list of 'admin orders'
    $this->drupalGet('admin/commerce/commerce_admin_order');
    $this->clickLink('Admin orders'); // CSS uppercases this in default theme
    $this->assertResponse(200, t('Accessed page listing admin orders successfully'));

    $key = 'order_table[' . $order->order_id . ']';
    $data = array($key => $order->order_id);
    $this->drupalPost(NULL, $data, t('Update to non-admin order(s)'));

    $this->assertText(
      t('1 Order(s) updated to no longer be Commerce Admin order(s). See log for details'),
      '\'1 Order(s) updated to no longer be Commerce Admin order(s). See log for details\' text appears on the page'
    );

    // Verify order ID no longer exists in commerce_admin_order_order table
    $select = db_select('commerce_admin_order_order', 'caoo')
      ->fields('caoo', array('order_id'))
      ->condition('caoo.order_id', $order->order_id, '=');

    $count = $select->countQuery()->execute()->fetchField();

    $this->assertIdentical($count, 0, 'Record no longer exists in commerce_admin_order_order table');

    // Verify that error message is displayed if the form is submitted without
    // any order(s) selected
    $this->drupalGet('admin/commerce/commerce_admin_order');
    $this->clickLink('Admin orders');
    $this->assertResponse(200, t('Accessed page listing non-admin orders successfully'));
    
    $this->drupalPost(NULL, array(), t('Update to non-admin order(s)'));
    
    $this->assertText(
      t('You must select at least one order'),
      '\'You must select at least one order\' text appears on the page'
    );
  }

/*
  // Test that the Rules module events work
  public function testCommerceAdminOrderRulesEvents() {
    // 'Admin order created.' - See commerce_checkout.test for example of populating form billing data
    // 'Admin order updated.' - Can test this and deleted by creating an order and inserting that order id into the module table
    // 'Admin order deleted.'
  }
*/
  /*
   * Tests:
   *   - Create order to test event messages are shown and therefore the events
   *     themselves are working
   *     
   *     Go admin/commerce/orders/add
   *     Click 'Add line item'
   *     Set 'Product SKU' = 'PROD-01'
   *     Click 'Add product'
   *     Set 'Full name' = 'Joe Bloggs'
   *     Set 'Country' = 'United Kingdom'
   *     Set 'Address 1' = 'Apsley House'
   *     Set 'Address 2' = '149 Piccadilly'
   *     Set 'City' = 'London'
   *     Set 'State' = ''
   *     Set 'Postal Code' = 'W1J 7NT'
   *     Click 'Save order'
   *     Confirm 'New order created via admin' message is displayed
   *     (Possible to ge the order id of the created order? So that the 
   *     subsequent tests can be done by operating on the created order?)
   *
   *     Go admin/commerce/orders/<order_id_just_created>/edit
   *     Set 'Full name' = 'John Smith'
   *     Click 'Save order'
   *     Check that message 'Commerce Admin order updated event' shown
   *     
   *     Go admin/commerce/orders/<order_id_just_updated>/delete
   *     Click 'Delete'
   *     Check that 'Commerce admin order deleted event' message is shown
   *     
   */
}